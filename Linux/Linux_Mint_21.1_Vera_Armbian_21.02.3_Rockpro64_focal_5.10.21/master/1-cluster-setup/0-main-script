#!/bin/bash
mkdir -p /home/.tmp/
#color defaults 
w=$(tput sgr0) 
r=$(tput setaf 1)
g=$(tput setaf 2) 
y=$(tput setaf 3) 
p=$(tput setaf 5)

#root requirements
if [[ $(/usr/bin/id -u) -ne 0 ]]; then
    echo "${y}-----------------------------------------------------------------------------------"
    echo "This script requires root privileges, please run${w} sudo su${y} or${w} sudo -i ${y}prior to run it"
    echo "e.g.${w} sudo $0 -c <clustername> -u <username> -a <primarynetworkinterfacename> -b <privatenetworkinterfacename> -p <ldappassword> ${y}"
    echo "-----------------------------------------------------------------------------------"
    exit
fi

USAGE="USAGE: $0 -c <clustername> -u <username> -a <primarynetworkinterfacename> -b <privatenetworkinterfacename> -p <ldappassword>"

if [ "$#" -lt "1" ] 
then 
    echo -e $USAGE;
exit 1    
else 
    var1=$2;
fi

while getopts c:u:a:b:p: option
do
case "${option}"
in
c) clustername=$OPTARG;;
u) user_name=$OPTARG;;
a) prinetworkinterface=$OPTARG;;
b) privnetworkinterface=$OPTARG;;
p) ldappassword=$OPTARG;;
esac
done

if [ "$clustername" = "" ]; then
"${g}Error, missing arguments:${y} -c | Cluster domain name | <string>
${w}$USAGE"
exit 1
fi
if [ "$user_name" = "" ]; then
"${g}Error, missing arguments:${y} -u | User domain name | <string>
${w}$USAGE"
exit 1
fi
if [ "$prinetworkinterface" = "" ]; then
"${g}Error, missing arguments:${y} -a | primary network interface | <string>
${w}$USAGE"
exit 1
fi
if [ "$privnetworkinterface" = "" ]; then
"${g}Error, missing arguments:${y} -b | private network interface | <string>
${w}$USAGE"
exit 1
fi
if [ "$ldappassword" = "" ]; then
"${g}Error, missing arguments:${y} -p | ldap password | <string>
${w}$USAGE"
exit 1
fi

echo "${g}"  # set fg g
echo	"=================================${w}"
echo	"Testing your network connection${g}"
echo	"================================="
#function of slash spin
spinner()
{
    local pid=$1
    local delay=0.75
    local spinstr='|/-\'
    while [ "$(ps a | awk '{print $1}' | grep $pid)" ]; do
        local temp=${spinstr#?}
        printf " [%c]  " "$spinstr"
        local spinstr=$temp${spinstr%"$temp"}
        sleep $delay
        printf "\b\b\b\b\b\b"
    done
    printf "    \b\b\b\b"
}

( wget -q --tries=10 --timeout=20 --spider http://google.com ) &
echo -n "Please wait... "
spinner $!
echo "DONE!${w}"

if [[ $? -eq 0 ]]; then
echo ""
echo "Connection OK"
echo "${g}"
else
echo "
Ouch!!!
--------------------------------------------------------------------------------------------------------
You are OFFLINE, your computer need to be connected to the Internet to install updates and some packages
If you continue without INTERNET connection the installation will no work
--------------------------------------------------------------------------------------------------------
"
function pause(){
   read -p "$*"
}
echo -e "setf 4" | tput -S
pause 'Connect to the Internet and Press [Enter] key to continue or [Ctrl+C] to exit.'
fi

echo	"${g}"
echo	"---------------------------------------------------------------------------------"
echo    "---------------------- Phase 1: Identify the Cluster ----------------------------"
echo    "---------------------------------------------------------------------------------"
	echo ""

echo ""

echo ""
echo "==============================================================="
echo "Cluster name or domain name (Example lbn):${w}"
echo "$clustername ${g}"
echo "==============================================================="
echo ""

#User name 
echo ""
echo "==============================================================="
echo "User name (Example me):${w}"
echo "$user_name ${g}"
echo "==============================================================="
echo ""
#primary network interface
echo "==============================================================="
echo "Primary network interface (Example eno1):${w}"
echo "$prinetworkinterface"
echo "${g}==============================================================="
echo ""

echo "${g}"
echo "==============================================================="
echo "Private network interface (Example enp11s0):${w}"
echo "$privnetworkinterface ${g}"
echo "==============================================================="
echo "${w}"
#ldap password
echo "${g}"
echo "==============================================================="
echo "Password for LDAP (The computer password is recommended)"
echo "===============================================================${y}"
echo "$ldappassword ${g}"
echo "===============================================================${w}"

echo "${g}"
echo "==============================================================="
echo "=================Configuring LDAP Server======================="
echo "==============================================================="
echo "${w}"
./1-update-req-packages -u $user_name
./2-network-setup -c $clustername -a $prinetworkinterface -b $privnetworkinterface
./3-ssh-nfs -u $user_name
./4-ganglia -c $clustername
./5-ldap -c $clustername -p $ldappassword
./6-nsswitch-sudoers -c $clustername
echo	" "
echo	" "
echo -e "setf 6" | tput -S
echo	"----------------------------------------------------------------------------------"
echo    "--------------------- We finhished the master configuration ----------------------"
echo    "----------------------------------------------------------------------------------"
echo    "In the next step we will restart the MASTER." 
echo    "-----------------------------------------------------------------------------------"
echo -e "setf 6" | tput -S
echo	"suport by e-mail to patrick@ufpa.br"
echo    'Thank you :-D'
echo	" "
echo "
				 ___        ______    __     __
				|   |      |	  \  |  \   |  | 
				|   |      |   D   ) |   \  |  | 
				|   |      |      /  |    \ |  | 
				|   |____  |      \  |  |\ \|  | 
				|        | |   D   ) |  | \    |  
				|________| |______/  |__|  \___|

     Laborat√≥rio de Biologia Molecular e Neuroecologia - IFPA 
"
function pause(){
   read -p "$*"
}
echo -e "${p}"
pause "Press ${w}[Enter]${y} key to restart the MASTER or ${w}[Ctrl+C]${y} to finish the script without restart it
NOTE: You need restart to get it running property"
shutdown -r 0
